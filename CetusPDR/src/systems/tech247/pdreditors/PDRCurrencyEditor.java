/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.pdreditors;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigDecimal;
import java.math.MathContext;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import systems.tech247.dbaccess.DataAccess;
import systems.tech247.hr.Currencies;
import systems.tech247.pdr.Utility;


/**
 *
 * @author Admin
 */
public class PDRCurrencyEditor extends javax.swing.JPanel{

    
    
    DataAccess da = new DataAccess();
    Currencies currency;
    
    
    
    
    //Updatables
  
    String currencyString = null;
    String currencyCode = null;
    String symbol= null;
    BigDecimal conversion = null;
    Boolean isBaseCurrency = false;
    NumberFormat nf =  new DecimalFormat("#,###.00");
    Boolean changed = false;
    String conversionString;
  
    EntityManager entityManager = da.getEntityManager();
    
   
    /**
     * Creates new form PersonalInfoPanel
     */
    public PDRCurrencyEditor(){
        this(null);
    }
    
    
    
    
 public PDRCurrencyEditor(Currencies currency) {
        initComponents();
        //Start transaction
        this.currency = currency;
        
        if(currency != null){
            jtCurrency.setText(currency.getCurrencyName());
            jtCurrencyCode.setText(currency.getCurrencyCode());
            jtCurrencySymbol.setText(currency.getCurrencySymbol());
            isBase.setSelected(currency.getIsBaseCurrency());
            try{
            jtConversionRate.setText(nf.format(currency.getConversionRate()));
            }catch(Exception ex){
                
            }
        }
        
        
        
        jtConversionRate.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if(evt.getPropertyName()=="value" && evt.getSource()==jtConversionRate){
                    conversionString = jtConversionRate.getText();
                }
            }
        });
        
        jtCurrency.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                currencyString = jtCurrency.getText();
            }

            @Override
            public void keyPressed(KeyEvent e) {
                currencyString = jtCurrency.getText();            
            }

            @Override
            public void keyReleased(KeyEvent e) {
                currencyString = jtCurrency.getText();
            }
        });
        
        jtCurrencyCode.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                currencyCode = jtCurrencyCode.getText();
            }

            @Override
            public void keyPressed(KeyEvent e) {
                currencyCode = jtCurrencyCode.getText();            
            }

            @Override
            public void keyReleased(KeyEvent e) {
                currencyCode = jtCurrencyCode.getText();
            }
        });
        
        jtCurrencySymbol.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                symbol = jtCurrencySymbol.getText();
            }

            @Override
            public void keyPressed(KeyEvent e) {
                symbol = jtCurrencySymbol.getText();            
            }

            @Override
            public void keyReleased(KeyEvent e) {
                symbol = jtCurrencySymbol.getText();
            }
        });
        
        isBase.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                changed = true;
                isBaseCurrency = isBase.isSelected();
            }
        });
        
        
        
        
        
        
        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtCurrency = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtCurrencyCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtCurrencySymbol = new javax.swing.JTextField();
        isBase = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jtConversionRate = new javax.swing.JFormattedTextField();
        jbSave = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jLabel1.text")); // NOI18N

        jtCurrency.setText(org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jtCurrency.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jLabel2.text")); // NOI18N

        jtCurrencyCode.setText(org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jtCurrencyCode.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jLabel3.text")); // NOI18N

        jtCurrencySymbol.setText(org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jtCurrencySymbol.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(isBase, org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.isBase.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jLabel4.text")); // NOI18N

        jtConversionRate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jtConversionRate.setText(org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jtConversionRate.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtCurrencyCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtCurrencySymbol, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jtCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jtConversionRate)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(isBase)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jtCurrency, jtCurrencyCode, jtCurrencySymbol});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtCurrencyCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtCurrencySymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jtConversionRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(isBase)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jbSave, org.openide.util.NbBundle.getMessage(PDRCurrencyEditor.class, "PDRCurrencyEditor.jbSave.text")); // NOI18N
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(253, 253, 253)
                .addComponent(jbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSave)
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        conversion = new BigDecimal(conversionString, MathContext.DECIMAL32);
        entityManager.getTransaction().begin();    
        
        if(currency == null){ //Add New Currency
            String insertSQL = "INSERT INTO [dbo].[Currencies]\n" +
"           ([CurrencyCode]\n" +
"           ,[CurrencyName]\n" +
"           ,[CurrencySymbol]\n" +
"           ,[ConversionRate]\n" +
"           ,[IsBaseCurrency]\n" +
"           ,[Deleted]\n" +
"           ,[isSecondCur])\n" +
"     VALUES\n" +
"           (?,?,?,?,?,?,?)";
            Query query = entityManager.createNativeQuery(insertSQL);
            query.setParameter(1, currencyCode);
            query.setParameter(2, currencyString);
            query.setParameter(3, symbol);
            query.setParameter(4, conversion);
            query.setParameter(5, isBaseCurrency);
            query.setParameter(6, false);
            query.setParameter(7, false);
            
            
            
            query.executeUpdate();
            entityManager.getTransaction().commit(); 
            
            resetEditor();
            StatusDisplayer.getDefault().setStatusText("Currency Saved");
            String sqlString ="SELECT r from Currencies r";
             Utility.loadCurrency(sqlString);
        }else{
            
            Currencies eba = entityManager.find(Currencies.class, currency.getCurrencyID());
            
            if(currencyString != null){
                eba.setCurrencyName(currencyCode);
            }
            if(changed){
                eba.setIsBaseCurrency(isBaseCurrency);
            }
            if(conversionString != null){
                
                eba.setConversionRate(conversion);
            }
            
            if(symbol != null){
                eba.setCurrencySymbol(symbol);
            }
            
             if(currencyCode != null){
                eba.setCurrencyCode(currencyCode);
            }
            
           
            
            
            
            entityManager.getTransaction().commit();
            String sqlString ="SELECT r from Currencies r";
             Utility.loadCurrency(sqlString);
            StatusDisplayer.getDefault().setStatusText("Currency Saved");
            resetEditor();
        }
        

    }//GEN-LAST:event_jbSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox isBase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbSave;
    private javax.swing.JFormattedTextField jtConversionRate;
    private javax.swing.JTextField jtCurrency;
    private javax.swing.JTextField jtCurrencyCode;
    private javax.swing.JTextField jtCurrencySymbol;
    // End of variables declaration//GEN-END:variables

    
    
    
    void modify(){
        
                jbSave.setEnabled(true);
            
        
    }

    
    public Lookup getLookup() {
        TopComponent tc = WindowManager.getDefault().findTopComponent("EmployeeEditorTopComponent");
        return tc.getLookup();
    }
    
    
    
    void resetEditor(){
        jtCurrency.setText("");
        
      
        
    }


    
    


}
