/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.pdreditors;

import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import javax.persistence.EntityManager;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import systems.tech247.dbaccess.DataAccess;

import systems.tech247.hr.Employees;
import systems.tech247.pdr.Utility;

/**
 *
 * @author Admin
 */
public final class EmpHealthInfoPanel extends javax.swing.JPanel implements LookupListener{
    
    String disabilityDetails;
    Employees emp;
    Boolean hasDisability = false;
    EntityManager entityManager = DataAccess.getEntityManager();
    TopComponent empTc = WindowManager.getDefault().findTopComponent("EmployeesTopComponent");
    Lookup.Result<Employees> empRslt = empTc.getLookup().lookupResult(Employees.class);
    /**
     * Creates new form PersonalInfoPanel
     */
    public EmpHealthInfoPanel() {
        initComponents();
        empRslt.addLookupListener(this);
        resultChanged(new LookupEvent(empRslt));
        disableInput();
        
        jtaDisablityDetails.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                disabilityDetails = jtaDisablityDetails.getText();
                modify();
            }

            @Override
            public void keyPressed(KeyEvent ke) {
                disabilityDetails = jtaDisablityDetails.getText();
                modify();
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                disabilityDetails = jtaDisablityDetails.getText();
                modify();
            }
        });
    }
    
    public Lookup getLookup() {
        TopComponent tc = WindowManager.getDefault().findTopComponent("EmployeeEditorTopComponent");
        return tc.getLookup();
    }
    
    void modify(){
        if(getLookup().lookup(MySavable.class)==null){
                    Utility.editorIC.add(new MySavable());
                }
    }
    
    private class MySavable extends AbstractSavable{

        public MySavable(){
            register();
        } 
        
        @Override
        protected String findDisplayName() {
            return "Employee";
        }

        @Override
        protected void handleSave() throws IOException {
            
            //If it is an update
            if(emp != null ){
            Utility.editorIC.remove(this);
            unregister();
            entityManager.getTransaction().begin();
            Employees e = entityManager.find(Employees.class, emp.getEmployeeID());
            if(null != disabilityDetails){
            e.setDisabilityDetails(disabilityDetails);
            }
           
            e.setIsPhysicallyDisabled(hasDisability);
            
            
            
            
            
            entityManager.getTransaction().commit();
            
            }
            
        }
        
        EmpHealthInfoPanel pnel(){
            return EmpHealthInfoPanel.this;
        }

        @Override
        public boolean equals(Object o) {
            if(o instanceof MySavable){
                MySavable m = (MySavable)o;
                return pnel() == m.pnel();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return pnel().hashCode();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbIsDisabled = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaDisablityDetails = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jcbIsDisabled, org.openide.util.NbBundle.getMessage(EmpHealthInfoPanel.class, "EmpHealthInfoPanel.jcbIsDisabled.text")); // NOI18N
        jcbIsDisabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbIsDisabledActionPerformed(evt);
            }
        });

        jtaDisablityDetails.setColumns(20);
        jtaDisablityDetails.setRows(5);
        jScrollPane1.setViewportView(jtaDisablityDetails);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EmpHealthInfoPanel.class, "EmpHealthInfoPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbIsDisabled)
                            .addComponent(jLabel1))
                        .addGap(0, 209, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcbIsDisabled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbIsDisabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbIsDisabledActionPerformed
        hasDisability = jcbIsDisabled.isSelected();
        modify();
    }//GEN-LAST:event_jcbIsDisabledActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox jcbIsDisabled;
    private javax.swing.JTextArea jtaDisablityDetails;
    // End of variables declaration//GEN-END:variables

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result<Employees> result = (Lookup.Result<Employees>)le.getSource();
        for (Employees e: result.allInstances()){
            
                
                emp = e;
                
                disableInput();
                
                try{
                    jcbIsDisabled.setSelected(e.getIsPhysicallyDisabled());
                    jtaDisablityDetails.setText(e.getDisabilityDetails());
                }catch(NullPointerException ex){
                    // When some info is missing
                }
            
        }
    }
    
    void disableInput(){
        boolean shl = null != emp;
        Component[] comps = getComponents();
        for(Component c: comps){
            c.setEnabled(shl);
        }
    }
}
