/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.pdreditors;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JButton;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import systems.tech247.dbaccess.DataAccess;
import systems.tech247.hr.JDCategories;
import systems.tech247.pdr.Utility;


/**
 *
 * @author Admin
 */
public class PDRJDCategoryEditor extends javax.swing.JPanel implements LookupListener{

    
    
    DataAccess da = new DataAccess();
    JDCategories jdc;
    
    
    
    
    //Updatables
    String outypeName = null;
   
    
    JDCategories parentCategory;
    
    
    EntityManager entityManager = DataAccess.getEntityManager();
    
    TopComponent categoryTc = WindowManager.getDefault().findTopComponent("JDCategoryTopComponent");
    Lookup.Result<JDCategories> categoryRslt = categoryTc.getLookup().lookupResult(JDCategories.class);
   
    /**
     * Creates new form PersonalInfoPanel
     */
    public PDRJDCategoryEditor(){
        this(null);
    }
    
    
    
    
 public PDRJDCategoryEditor(JDCategories jdc) {
        initComponents();
        //Start transaction
        this.jdc = jdc;
        
        if(jdc != null){
            jtCategoryName.setText(jdc.getCategoryName());
            
            try{
                jtParentCategory.setText(jdc.getParentJDCategoryID().getCategoryName());
            }catch(NullPointerException ex){
                jtParentCategory.setText("");
            }
            
        }
        
        
        categoryRslt.addLookupListener(this);
        resultChanged(new LookupEvent(categoryRslt));
        
        
        jtCategoryName.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                outypeName = jtCategoryName.getText();
            }

            @Override
            public void keyPressed(KeyEvent e) {
                outypeName = jtCategoryName.getText();
            }

            @Override
            public void keyReleased(KeyEvent e) {
                outypeName = jtCategoryName.getText();
            }
        });
        

        
        jtParentCategory.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                Object[] options = {new JButton("Close")};
                DialogDisplayer.getDefault().notify(new DialogDescriptor(categoryTc, "Select Parent Category",true, options,null,DialogDescriptor.DEFAULT_ALIGN,null,null)); 
            }

            @Override
            public void keyPressed(KeyEvent ke) {
                
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                
            }
        });
        
        
        
        
        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jtParentCategory = new javax.swing.JTextField();
        jtCategoryName = new javax.swing.JTextField();
        jbSave = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PDRJDCategoryEditor.class, "PDRJDCategoryEditor.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PDRJDCategoryEditor.class, "PDRJDCategoryEditor.jLabel1.text")); // NOI18N

        jtParentCategory.setBackground(new java.awt.Color(0, 204, 0));
        jtParentCategory.setText(org.openide.util.NbBundle.getMessage(PDRJDCategoryEditor.class, "PDRJDCategoryEditor.jtParentCategory.text")); // NOI18N

        jtCategoryName.setText(org.openide.util.NbBundle.getMessage(PDRJDCategoryEditor.class, "PDRJDCategoryEditor.jtCategoryName.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtCategoryName, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jtParentCategory))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtParentCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jbSave, org.openide.util.NbBundle.getMessage(PDRJDCategoryEditor.class, "PDRJDCategoryEditor.jbSave.text")); // NOI18N
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSave)
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        entityManager.getTransaction().begin();    
        
        if(jdc == null){ //Add New Account
            String insertSQL = "INSERT INTO [dbo].[JDCategories]\n" +
"           ([CategoryName]\n" +
"           ,[ParentJDCategoryID]\n" +
"           ,[Deleted])\n" +
"     VALUES\n" +
"           (?,?,?)";
            Query query = entityManager.createNativeQuery(insertSQL);
            query.setParameter(1, outypeName);
            
            if(null != parentCategory){
            query.setParameter(2, parentCategory.getJDCategoryID());    
            }
            query.setParameter(3, false);
            
            query.executeUpdate();
            entityManager.getTransaction().commit(); 
            
            resetEditor();
            String sqlString ="SELECT r from JDCategories r";
            Utility.loadJDCategories(sqlString);
            StatusDisplayer.getDefault().setStatusText("JD Category Added");
        }else{
            
            JDCategories eba = entityManager.find(JDCategories.class, jdc.getJDCategoryID());
            
            
            
            if(null != outypeName){
                eba.setCategoryName(outypeName);
            }
            
            if(null != parentCategory){
                eba.setParentJDCategoryID(parentCategory);
            }
            
            
            
            
            
            
            
            entityManager.getTransaction().commit();
            StatusDisplayer.getDefault().setStatusText("JD Category Saved");
            
            String sqlString ="SELECT r from JDCategories r";
            Utility.loadJDCategories(sqlString);
            
           
        }
        

    }//GEN-LAST:event_jbSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbSave;
    private javax.swing.JTextField jtCategoryName;
    private javax.swing.JTextField jtParentCategory;
    // End of variables declaration//GEN-END:variables

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result result = (Lookup.Result)le.getSource();
        for (Object e: result.allInstances()){
            
                
                
               if(e instanceof JDCategories){
                parentCategory = ((JDCategories) e);
                jtParentCategory.setText(parentCategory.getCategoryName());
                modify();
            } 
                
                
                
                
                
                
            }
            
            
            
            
            
            
            
            
            
        }
    
    
    void modify(){
        
                jbSave.setEnabled(true);
            
        
    }

    
    public Lookup getLookup() {
        TopComponent tc = WindowManager.getDefault().findTopComponent("EmployeeEditorTopComponent");
        return tc.getLookup();
    }
    
    
    
    void resetEditor(){
        jtCategoryName.setText("");
        jtParentCategory.setText("");
        jdc=null;
        parentCategory = null;
        outypeName = null;
        
    }
    
    


}
